// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-optimizely/optimizely-go/core"
	io "io"
	http "net/http"
)

type ModelsClient interface {
	Get(ctx context.Context) (*ModelsResponseDto, error)
	GetByName(ctx context.Context, name any) (*ModelDto, error)
}

func NewModelsClient(opts ...core.ClientOption) ModelsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &modelsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type modelsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (m *modelsClient) Get(ctx context.Context) (*ModelsResponseDto, error) {
	baseURL := ""
	if m.baseURL != "" {
		baseURL = m.baseURL
	}
	endpointURL := baseURL + "/" + "api/models"

	var response *ModelsResponseDto
	if err := core.DoRequest(
		ctx,
		m.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		m.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (m *modelsClient) GetByName(ctx context.Context, name any) (*ModelDto, error) {
	baseURL := ""
	if m.baseURL != "" {
		baseURL = m.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"api/model/%v", name)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *ModelDto
	if err := core.DoRequest(
		ctx,
		m.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		m.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
